{"version":3,"sources":["images/logo512.png","utils.js","Components/weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getCurrentPosition","navigator","geolocation","Promise","resolve","reject","formatTemp","temp","Math","floor","toString","getTime","time","moment","utcOffset","format","Weather","useState","setTemp","city","setCity","description","setDescription","setTime","img","setImg","showForm","setShowForm","zip","setZip","imgURL","API_KEY","process","useEffect","a","catch","e","console","log","message","undefined","coords","latitude","longitude","fetch","api_call","json","data","cod","weather","icon","main","name","timezone","getLocation","zipLocation","zipcode","handleSubmit","preventDefault","target","reset","className","src","alt","Button","variant","onClick","Row","Col","md","Form","onSubmit","Group","controlId","Control","value","onChange","type","placeholder","App","Container","Jumbotron","logo","width","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","error"],"mappings":"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","file":"static/js/main.61d58bc3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo512.33b20e5e.png\";","import moment from \"moment\";\n\nexport function getCurrentPosition(options = {}) {\n  if (navigator.geolocation) {\n    return new Promise(\n      (resolve, reject) => navigator.geolocation.getCurrentPosition(resolve, reject)\n    )\n  } else {\n    return new Promise(\n      resolve => resolve({})\n    )\n  }\n}\n\nexport function formatTemp(temp){\n  //formatting to fahrenheit\n  let newTemp = Math.floor((temp - 273) * (9 / 5) + 32)\n  return newTemp.toString() + \"\\xB0\"\n}\n\nexport function getTime(time){\n  //converts time based on utc offset, which api provides\n  return moment().utcOffset(time / 60).format(\"h:mm a\")\n}","import React, { useState, useEffect } from 'react';\nimport { getCurrentPosition, formatTemp, getTime } from \"../utils\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nexport default function Weather() {\n  \n  const [temp, setTemp] = useState(\"0 \\xB0\");\n  const [city, setCity] = useState(\"City\");\n  const [description, setDescription] = useState(\"Description\");\n  const [time, setTime] = useState(\"0:00\");\n  const [img, setImg] = useState();\n  const [showForm, setShowForm] = useState(false);\n  const [zip, setZip] = useState('');\n\n  const imgURL = `https://openweathermap.org/img/wn/${img}@2x.png`;\n  const API_KEY = process.env.REACT_APP_API_KEY;\n\n  useEffect(() => {\n    const getLocation = async () => {\n      const { coords } = await getCurrentPosition() || {}.catch(e => console.log(\"Error: \", e.message));\n      if (coords === undefined) {\n        return\n      }\n      const { latitude, longitude } = coords;\n  \n      let api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}`).catch(e => console.log(\"Error: \", e.message));\n       \n      let data = await api_call.json();\n\n      if (data.cod === \"404\") {\n        return\n      } else {\n        setImg(data.weather[0].icon);\n        setTemp(formatTemp(data.main.temp));\n        setCity(data.name);\n        setDescription(data.weather[0].description);\n        setTime(getTime(data.timezone));\n      }\n    }\n    getLocation();\n  }, [API_KEY]) // will only re-run if api key changes\n\n  const zipLocation = async (zipcode) => {\n    let api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?zip=${zipcode}&appid=${API_KEY}`).catch(e => console.log(\"Error: \", e.message));\n       \n    let data = await api_call.json();\n    console.log(data)\n    if (data.cod === \"404\") {\n      return\n    } else {\n      setTemp(formatTemp(data.main.temp));\n      setImg(data.weather[0].icon);\n      setCity(data.name);\n      setDescription(data.weather[0].description);\n      setTime(getTime(data.timezone));\n    }\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    zipLocation(zip);\n    setShowForm(false);\n    e.target.reset();\n    setZip('')\n  }\n\n  const toggleForm = () => {\n    if (showForm === false) {\n      return (\n        <Button variant=\"primary\" onClick={() => setShowForm(true)}>Pick a location!</Button>)\n    } else {\n      return (\n        <Row className=\"justify-content-md-center\">\n          <Col md={4}>\n            <Form onSubmit={handleSubmit}>\n              <Form.Group controlId=\"searchZipCode\">\n                <Form.Control\n                  value={zip}\n                  onChange={e => setZip(e.target.value)}\n                  className=\"input-sm\" name=\"zip\" type=\"number\" placeholder=\"Enter a zip code!\" />\n              </Form.Group>\n              <Button variant=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            </Form>\n          </Col>\n        </Row>\n      )\n    }\n  }\n\n  return (\n    \n    <div className=\" text-uppercase text-white text-center px-4\">\n      {img ? <img src={imgURL} alt={description} /> : null}\n      <h1 className=\"header\">{temp}</h1>\n      <p>{description}</p>\n      <p>{city}</p>\n      <p>{time}</p>\n      {toggleForm()}\n    </div>\n  )\n}","import React from 'react';\nimport Weather from './Components/weather';\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport logo from \"./images/logo512.png\";\n\nexport default function App() {\n  return (\n    <>\n      <Container className=\"p-3\">\n        <Jumbotron className=\"card card-image gradient pt-3\">\n          <div className=\"d-flex\">\n            <img\n              src={logo}\n              width=\"30\"\n              height=\"30\"\n              className=\"d-inline-block align-top\"\n              alt=\"The weather app logo\"\n            />\n            <h3 className=\"px-3\">The Weather App</h3>\n          </div>\n          <Weather />\n        </Jumbotron>\n      </Container>\n    </>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootswatch/dist/slate/bootstrap.min.css\"; \nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}